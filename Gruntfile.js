module.exports = function(grunt) {
    require("matchdep").filterDev("grunt-*").forEach(grunt.loadNpmTasks);

    grunt.initConfig({
        pkg: grunt.file.readJSON("package.json"),

        DEV_PATH: "src",
        PROD_PATH: "dist",

        /**
         * This will be injected at the top of the minified script/css files.
         */
        banner: [
            '/*',
            ' * Project: <%= pkg.name %>',
            ' * Version: <%= pkg.version %> (<%= grunt.template.today("yyyy-mm-dd") %>)',
            ' * Author: <%= pkg.author %>',
            ' * Copyright (c) <%= grunt.template.today("yyyy") %> Artist Growth, LLC',
            ' */'
        ],

        /**
         * HTML validation settings.
         */
        htmlhint: {
            build: {
                options: {
                    "tag-pair": true,
                    "tagname-lowercase": true,
                    "attr-lowercase": true,
                    "attr-value-double-quotes": true,
                    "doctype-first": true,
                    "spec-char-escape": true,
                    "id-unique": true,
                    "head-script-disabled": true,
                    "style-disabled": true
                },
                src: ["<%= DEV_PATH %>/index.html"]
            }
        },

        /**
         * Javascript validation settings. Only non-vendor scripts will be
         * analyzed.
         */
        jshint: {
            build: "<%= DEV_PATH %>/js/*.js"
        },

        clean: {
            dev: ["<%= DEV_PATH %>/app.css"],
            prod: ["<%= PROD_PATH %>"]
        },

        less: {
            build: {
                src: "<%= DEV_PATH %>/less/app.less",
                dest: "<%= DEV_PATH %>/css/app.css",
                options: {
                    paths: [
                        "<%= DEV_PATH %>/bower_components/bootstrap/less",
                        "<%= DEV_PATH %>/less"
                    ]
                }
            }
        },

        /**
         * Attaches a banner to the top of any generated minified files.
         */
        usebanner: {
            prod: {
                options: {
                    position: "top",
                    banner: "<%= banner.join('\\n') %>",
                    linebreak: true
                },
                files: {
                    src: [
                        "<%= PROD_PATH %>/js/app.min.js",
                        "<%= PROD_PATH %>/css/app.min.css"
                    ]
                }
            }
        },

        /**
         * Generates concat, uglify, and cssmin tasks based on comment blocks
         * found in the target HTML files.
         */
        useminPrepare: {
            html: ["<%= DEV_PATH %>/index.html"],
            options: {
                dest: "<%= PROD_PATH %>"
            }
        },

        /**
         * Substitutes minified JS/CSS files for the original source files found
         * in comment blocks in the target HTML files.
         */
        usemin: {
            html: ["<%= PROD_PATH %>/index.html"],
            options: {
                dirs: ["<%= PROD_PATH %>"]
            }
        },

        /**
         * Additional parameters for Uglify. These will be used in addition to
         * the task that is generated by useminPrepare.
         */
        uglify: {
            options: {
                compress: {
                    global_defs: {
                        "DEBUG": false
                    },
                    drop_console: true,
                    dead_code: true
                }
            }
        },

        /**
         * Copies files from the source folder to the production folder.
         */
        copy: {
            prod: {
                files: [
                    { expand: true, cwd: "<%= DEV_PATH %>", src: ["fonts/**"], dest: "<%= PROD_PATH %>" },
                    { expand: true, cwd: "<%= DEV_PATH %>", src: ["images/**"], dest: "<%= PROD_PATH %>" },

                    // jQuery needs to be copied as a CDN fallback.
                    { expand: true, cwd: "<%= DEV_PATH %>", src: ["js/vendor/jquery-1.11.1.min.js"], dest: "<%= PROD_PATH %>", filter: "isFile" },
                    { expand: true, cwd: "<%= DEV_PATH %>", src: ["index.html"], dest: "<%= PROD_PATH %>", filter: "isFile" },
                    { expand: true, cwd: "<%= DEV_PATH %>", src: ["CNAME"], dest: "<%= PROD_PATH %>", filter: "isFile" },
                ]
            }
        },

        /**
         * Performs some basic HTML minification. This is currently configured
         * to be pretty unaggressive.
         */
        htmlmin: {
            prod: {
                options: {
                    removeComments: true,
                    collapseWhitespace: false
                },
                src: "<%= PROD_PATH %>/index.html",
                dest: "<%= PROD_PATH %>/index.html"
            }
        },

        /**
         * Defines local web servers for each environment.
         */
        express: {
            dev: {
                options: {
                    port: 8000,
                    hostname: "127.0.0.1",
                    bases: ["<%= DEV_PATH %>"],
                    livereload: true
                }
            },
            prod: {
                options: {
                    port: 8001,
                    hostname: "127.0.0.1",
                    bases: ["<%= PROD_PATH %>"],
                    livereload: true
                }
            }
        },

        /**
         * Opens the default browser to the specified path, which will be one of
         * the express web server definitions.
         */
        open: {
            dev: {
                path: "http://<%= express.dev.options.hostname %>:<%= express.dev.options.port %>/"
            },
            prod: {
                path: "http://<%= express.prod.options.hostname %>:<%= express.prod.options.port %>/"
            }
        },

        /**
         * Performs the following tasks automagically:
         *    - Refreshes the browser window when index.html or any of the CSS
         *      files are changed (requires LiveReload extension in Chrome).
         *    - Runs htmlhint whenever index.html is changed.
         *    - Runs jshint whenever non-vendor JS is changed.
         *    - Compiles LESS files whenever they are changed.
         */
        watch: {
            livereload: {
                options: {
                    livereload: true
                },
                files: [
                    "<%= DEV_PATH %>/index.html",
                    "<%= DEV_PATH %>/css/**/*.css"
                ]
            },
            html: {
                files: "<%= htmlhint.build.src %>",
                tasks: ["htmlhint"]
            },
            jshint: {
                files: "<%= jshint.build %>",
                tasks: ["jshint"]
            },
            dev: {
                files: ["<%= less.build.src %>"],
                tasks: ["less"]
            }
        }
    });

    /**
     * Grunt Tasks
     *
     * grunt [--target=dev]
     *    Perform a development build and serve it locally. HTML/CSS files will
     *    be monitored for changes, and the page will be automatically reloaded.
     *    As dev is the default target environment, the target parameter is
     *    optional.
     *
     * grunt --target=prod
     *    Perform a production build and serve it locally.
     *
     * grunt build [--target=dev|prod]
     *    Perform a build of the project without starting a server. If no target
     *    environment is specified, then dev will be used.
     *
     * grunt server [--target=dev|prod]
     *    Launch a server for the target environment. If no target environment
     *    is specified, then dev will be used.
     */

    var target = grunt.option("target") || "dev";

    grunt.registerTask("default", ["build:" + target, "server:" + target]);
    grunt.registerTask("build", ["build:" + target]);
    grunt.registerTask("server", ["server:" + target]);

    grunt.registerTask("server:dev", [
        "express:dev",
        "open:dev",
        "watch"
    ]);

    grunt.registerTask("build:dev", [
        "jshint",
        "htmlhint",
        "less"
    ]);

    grunt.registerTask("build:prod", [
        "clean:prod",
        "jshint",
        "htmlhint",
        "less",
        "copy",
        "useminPrepare",
        "concat",
        "cssmin",
        "uglify",
        "usemin",
        "usebanner",
        "htmlmin"
    ]);

    grunt.registerTask("server:prod", [
        "express:prod",
        "open:prod",
        "express-keepalive"
    ]);
};
